{
  "version": 3,
  "file": "mygame.js",
  "sources": [
    "src/achievements.js",
    "src/game.js",
    "src/generated/assetlist.js",
    "src/generated/i18n.js",
    "src/generated/scenelist.js",
    "..\\..\\..\\..\\..\\..\\assets\\scenes\\scene1\\scene.js",
    "..\\..\\..\\..\\..\\..\\assets\\scenes\\scene2\\scene.js"
  ],
  "names": [],
  "mappings": "AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;A;AChBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,G;ACpihTA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,E",
  "sourceRoot": "/",
  "sourcesContent": [
    "define('mygame/achievements', ['lyria/achievement', 'lyria/achievement/manager'], function(Achievement, AchievementManager) {\r\n  \r\n  return function(viewport, i18n) {\r\n    \r\n    AchievementManager.viewport = viewport;\r\n    AchievementManager.localization = i18n;\r\n    \r\n    var achievement = new Achievement({\r\n      name: 'switchScene'\r\n    });\r\n    \r\n    AchievementManager.add(achievement);\r\n    \r\n  };\r\n  \r\n  \r\n});\r\n",
    "define('mygame', \r\n  ['lyria/game', 'lyria/localization/group', 'mygame/achievements', 'mygame/scenelist', 'mygame/assetlist', 'mygame/i18n'], \r\n  function(Game, LocalizationGroup, achievements, sceneList, assetList, i18n) {\r\n  'use strict';\r\n  \r\n  // Create a new game object\r\n\tvar myGame = new Game();\r\n\t\r\n\tmyGame.localization = new LocalizationGroup(i18n);\r\n\t\r\n\t// Set up achievements\r\n\tachievements(myGame.viewport, myGame.localization.achievements);\r\n\t\r\n\tconsole.log(myGame);\r\n\t\r\n\t// Set generated scene files\r\n\tmyGame.director.scenes = sceneList();\r\n\t\r\n\t// If preloader is complete, everything in this function happens\r\n\tmyGame.preloader.on('complete', function() {\r\n    // Add \"scene1\" to director\r\n    myGame.director.add('scene1');\r\n    // Add \"scene2\" to director\r\n    myGame.director.add('scene2');\r\n\r\n    // Show \"scene1\"\r\n    myGame.director.show('scene1');\r\n  });\r\n  \r\n  // Set asset list for preloader\r\n  myGame.preloader.assets = assetList;\r\n  \r\n  // Spin up the preloader\r\n  myGame.preloader.start();\r\n\t\r\n\treturn myGame;\r\n});",
    "define(\"mygame/assetlist\",{});",
    "define(\"mygame/i18n\", {\"achievements\":{\"de\":{\"switchScene\":\"Szene gewechselt\",\"switchScene-description\":\"Sie haben die Szene gewechselt.\"},\"en\":{\"switchScene\":\"Switched scene\",\"switchScene-description\":\"You switched the scene.\"}},\"app\":{\"de\":{\"appName\":\"Lyria.js Template\"},\"en\":{\"appName\":\"Lyria.js Template\"}}});",
    "define('mygame/scenelist', ['lyria/scene', 'lyria/template/engine', 'lyria/localization'], function(Scene, TemplateEngine, Localization) {\n\n  return function(param) {\n    for (sceneKey in param) {\n      var sceneValue = param[sceneKey];\n      Scene.requireAlways[sceneKey] = sceneValue;\n    }\n\n    var sceneList = {};\n\n    sceneList['scene1'] = new Scene('scene1', {}, function() {\n      var self = this;\n\n      this.localization = new Localization({\n        \"en\": {\n          \"title\": \"This is {{name}}\",\n          \"btnSwitchToNextScene\": \"Switch to next scene\"\n        },\n        \"de\": {\n          \"title\": \"Das ist {{name}}\",\n          \"btnSwitchToNextScene\": \"Zur nÃ¤chsten Szene wechseln\"\n        }\n      });\n      this.template = this.template || {};\n      this.template.partials = {};\n      this.template.source = TemplateEngine.compile(function(Handlebars, depth0, helpers, partials, data) {\n        this.compilerInfo = [4, '>= 1.0.0'];\n        helpers = this.merge(helpers, Handlebars.helpers);\n        partials = this.merge(partials, Handlebars.partials);\n        data = data || {};\n        var buffer = \"\",\n          stack1, stack2, options, functionType = \"function\",\n          escapeExpression = this.escapeExpression,\n          self = this,\n          helperMissing = helpers.helperMissing;\n\n        function program1(depth0, data) {\n\n          var buffer = \"\",\n            stack1;\n          buffer += \"\\r\\n  \";\n          stack1 = helpers.each.call(depth0, depth0.gameobject, {\n            hash: {},\n            inverse: self.noop,\n            fn: self.program(2, program2, data),\n            data: data\n          });\n          if (stack1 || stack1 === 0) {\n            buffer += stack1;\n          }\n          buffer += \"\\r\\n\";\n          return buffer;\n        }\n\n        function program2(depth0, data) {\n\n          var buffer = \"\",\n            stack1;\n          buffer += \"\\r\\n    <div id=\\\"\";\n          if (stack1 = helpers.name) {\n            stack1 = stack1.call(depth0, {\n              hash: {},\n              data: data\n            });\n          } else {\n            stack1 = depth0.name;\n            stack1 = typeof stack1 === functionType ? stack1.apply(depth0) : stack1;\n          }\n          buffer += escapeExpression(stack1) + \"\\\">\";\n          if (stack1 = helpers.content) {\n            stack1 = stack1.call(depth0, {\n              hash: {},\n              data: data\n            });\n          } else {\n            stack1 = depth0.content;\n            stack1 = typeof stack1 === functionType ? stack1.apply(depth0) : stack1;\n          }\n          if (stack1 || stack1 === 0) {\n            buffer += stack1;\n          }\n          buffer += \"</div>\\r\\n  \";\n          return buffer;\n        }\n\n        function program4(depth0, data) {\n\n          var buffer = \"\",\n            stack1;\n          buffer += \"\\r\\n  \";\n          stack1 = helpers.each.call(depth0, depth0.prefab, {\n            hash: {},\n            inverse: self.noop,\n            fn: self.program(2, program2, data),\n            data: data\n          });\n          if (stack1 || stack1 === 0) {\n            buffer += stack1;\n          }\n          buffer += \"\\r\\n\";\n          return buffer;\n        }\n\n        function program6(depth0, data) {\n\n          var buffer = \"\",\n            stack1;\n          buffer += \"\\r\\n  \";\n          stack1 = self.invokePartial(partials.guilayer, 'guilayer', depth0, helpers, partials, data);\n          if (stack1 || stack1 === 0) {\n            buffer += stack1;\n          }\n          buffer += \"\\r\\n\";\n          return buffer;\n        }\n\n        buffer += \"<div>\";\n        if (stack1 = helpers.title) {\n          stack1 = stack1.call(depth0, {\n            hash: {},\n            data: data\n          });\n        } else {\n          stack1 = depth0.title;\n          stack1 = typeof stack1 === functionType ? stack1.apply(depth0) : stack1;\n        }\n        buffer += escapeExpression(stack1) + \"</div>\\r\\n\\r\\n<span id=\\\"btnSwitch\\\" class=\\\"clickable\\\">\";\n        options = {\n          hash: {},\n          data: data\n        };\n        buffer += escapeExpression(((stack1 = helpers.translate || depth0.translate), stack1 ? stack1.call(depth0, \"btnSwitchToNextScene\", options) : helperMissing.call(depth0, \"translate\", \"btnSwitchToNextScene\", options))) + \"</span>\";\n        stack2 = helpers['if'].call(depth0, depth0.gameobject, {\n          hash: {},\n          inverse: self.noop,\n          fn: self.program(1, program1, data),\n          data: data\n        });\n        if (stack2 || stack2 === 0) {\n          buffer += stack2;\n        }\n        stack2 = helpers['if'].call(depth0, depth0.prefab, {\n          hash: {},\n          inverse: self.noop,\n          fn: self.program(4, program4, data),\n          data: data\n        });\n        if (stack2 || stack2 === 0) {\n          buffer += stack2;\n        }\n        stack2 = helpers['if'].call(depth0, depth0.guilayer, {\n          hash: {},\n          inverse: self.noop,\n          fn: self.program(6, program6, data),\n          data: data\n        });\n        if (stack2 || stack2 === 0) {\n          buffer += stack2;\n        }\n        return buffer;\n      }, {\n        helpers: self.template.helpers,\n        partials: self.template.partials\n      });\n\n      (function() {\n        //$ Lyria Scene begin\n        (function(scene) {\n\n          var Lyria = scene.modules.Lyria;\n\n          scene.on('achievement', function() {\n            Lyria.AchievementManager.show('switchScene');\n          });\n\n          scene.bindEvents({\n            '#btnSwitch': {\n              'click': function(event) {\n                scene.trigger('achievement');\n                scene.parent.show('scene2');\n              }\n            }\n          });\n\n          scene.expose({\n            test: \"Hallo\",\n            title: scene.t('title', {\n              name: scene.name\n            })\n          });\n\n          console.log(scene);\n          console.log(scene.game);\n          scene.log('yeeha!');\n\n        })(this);\n\n        //$ Lyria Scene end\n      }).call(this);\n\n    });\n\n    sceneList['scene2'] = new Scene('scene2', {}, function() {\n      var self = this;\n\n      this.localization = new Localization({\n        \"en\": {},\n        \"de\": {}\n      });\n      this.template = this.template || {};\n      this.template.partials = {};\n      this.template.source = TemplateEngine.compile(function(Handlebars, depth0, helpers, partials, data) {\n        this.compilerInfo = [4, '>= 1.0.0'];\n        helpers = this.merge(helpers, Handlebars.helpers);\n        partials = this.merge(partials, Handlebars.partials);\n        data = data || {};\n        var buffer = \"\",\n          stack1, functionType = \"function\",\n          escapeExpression = this.escapeExpression,\n          self = this;\n\n        function program1(depth0, data) {\n\n          var buffer = \"\",\n            stack1;\n          buffer += \"\\r\\n  \";\n          stack1 = helpers.each.call(depth0, depth0.gameobject, {\n            hash: {},\n            inverse: self.noop,\n            fn: self.program(2, program2, data),\n            data: data\n          });\n          if (stack1 || stack1 === 0) {\n            buffer += stack1;\n          }\n          buffer += \"\\r\\n\";\n          return buffer;\n        }\n\n        function program2(depth0, data) {\n\n          var buffer = \"\",\n            stack1;\n          buffer += \"\\r\\n    <div id=\\\"\";\n          if (stack1 = helpers.name) {\n            stack1 = stack1.call(depth0, {\n              hash: {},\n              data: data\n            });\n          } else {\n            stack1 = depth0.name;\n            stack1 = typeof stack1 === functionType ? stack1.apply(depth0) : stack1;\n          }\n          buffer += escapeExpression(stack1) + \"\\\">\";\n          if (stack1 = helpers.content) {\n            stack1 = stack1.call(depth0, {\n              hash: {},\n              data: data\n            });\n          } else {\n            stack1 = depth0.content;\n            stack1 = typeof stack1 === functionType ? stack1.apply(depth0) : stack1;\n          }\n          if (stack1 || stack1 === 0) {\n            buffer += stack1;\n          }\n          buffer += \"</div>\\r\\n  \";\n          return buffer;\n        }\n\n        function program4(depth0, data) {\n\n          var buffer = \"\",\n            stack1;\n          buffer += \"\\r\\n  \";\n          stack1 = helpers.each.call(depth0, depth0.prefab, {\n            hash: {},\n            inverse: self.noop,\n            fn: self.program(2, program2, data),\n            data: data\n          });\n          if (stack1 || stack1 === 0) {\n            buffer += stack1;\n          }\n          buffer += \"\\r\\n\";\n          return buffer;\n        }\n\n        function program6(depth0, data) {\n\n          var buffer = \"\",\n            stack1;\n          buffer += \"\\r\\n  \";\n          stack1 = self.invokePartial(partials.guilayer, 'guilayer', depth0, helpers, partials, data);\n          if (stack1 || stack1 === 0) {\n            buffer += stack1;\n          }\n          buffer += \"\\r\\n\";\n          return buffer;\n        }\n\n        buffer += \"<div>\";\n        if (stack1 = helpers.test) {\n          stack1 = stack1.call(depth0, {\n            hash: {},\n            data: data\n          });\n        } else {\n          stack1 = depth0.test;\n          stack1 = typeof stack1 === functionType ? stack1.apply(depth0) : stack1;\n        }\n        buffer += escapeExpression(stack1) + \"</div>\";\n        stack1 = helpers['if'].call(depth0, depth0.gameobject, {\n          hash: {},\n          inverse: self.noop,\n          fn: self.program(1, program1, data),\n          data: data\n        });\n        if (stack1 || stack1 === 0) {\n          buffer += stack1;\n        }\n        stack1 = helpers['if'].call(depth0, depth0.prefab, {\n          hash: {},\n          inverse: self.noop,\n          fn: self.program(4, program4, data),\n          data: data\n        });\n        if (stack1 || stack1 === 0) {\n          buffer += stack1;\n        }\n        stack1 = helpers['if'].call(depth0, depth0.guilayer, {\n          hash: {},\n          inverse: self.noop,\n          fn: self.program(6, program6, data),\n          data: data\n        });\n        if (stack1 || stack1 === 0) {\n          buffer += stack1;\n        }\n        return buffer;\n      }, {\n        helpers: self.template.helpers,\n        partials: self.template.partials\n      });\n\n      (function() {\n        //$ Lyria Scene begin\n        (function(scene) {\n\n          scene.expose({\n            test: 'Hallo'\n          });\n\n        })(this);\n\n        //$ Lyria Scene end\n      }).call(this);\n\n    });\n\n    return sceneList;\n  };\n\n});\n\n/*\n//@ sourceMappingURL=scenelist.js.map\n*/",
    "(function(scene) {\r\n  \r\n  var Lyria = scene.modules.Lyria;\r\n\r\n  scene.on('achievement', function() {\r\n    Lyria.AchievementManager.show('switchScene');\r\n  });\r\n\r\n  scene.bindEvents({\r\n    '#btnSwitch': {\r\n      'click': function(event) {\r\n        scene.trigger('achievement');\r\n        scene.parent.show('scene2');\r\n      }\r\n    }\r\n  });\r\n\r\n  scene.expose({\r\n    test: \"Hallo\",\r\n    title: scene.t('title', {\r\n      name: scene.name\r\n    })\r\n  });\r\n\r\n  console.log(scene);\r\n  console.log(scene.game);\r\n  scene.log('yeeha!');\r\n\r\n})(this);\r\n",
    "(function(scene) {\r\n  \r\n  scene.expose({\r\n    test: 'Hallo'\r\n  });\r\n  \r\n})(this);\r\n"
  ]
}